{"version":3,"sources":["components/header/Header.js","data/data.js","components/home/Home.js","pages/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","src","type","id","htmlFor","greeting","username","title","emoji","profession","subTitle","Home","alt","Main","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAmCeA,MAjCf,WACI,OACI,oCACI,4BAAQC,UAAU,UACd,uBAAGC,KAAK,KACJ,yBAAKD,UAAU,OAAOE,IAAI,sBAE9B,2BAAOF,UAAU,WAAWG,KAAK,WAAWC,GAAG,aAC/C,2BAAOJ,UAAU,YAAYK,QAAQ,YACjC,0BAAML,UAAU,aAEpB,wBAAIA,UAAU,QACV,4BACI,uBAAGC,KAAK,WAAR,WAEJ,4BACI,uBAAGA,KAAK,aAAR,aAEJ,4BACI,uBAAGA,KAAK,aAAR,aAEJ,4BACI,uBAAGA,KAAK,iBAAR,iBAEJ,4BACI,uBAAGA,KAAK,YAAR,mB,gBCrBlBK,EAAW,CACbC,SAAU,iBACVC,MAAOC,IAAM,8BACbC,WAAY,+DACZC,SAAUF,IAAM,+J,MC2BLG,MAhCf,WACI,OACQ,yBAAKZ,UAAU,aAAaI,GAAG,YAC3B,yBAAKJ,UAAU,iBACX,yBAAKA,UAAU,qBACX,6BACI,wBAAIA,UAAU,eAAd,SAEI,0BAAMA,UAAU,cAAcS,IAAM,kBAExC,wBAAIT,UAAU,iBACTM,EAASE,OAEd,uBAAGR,UAAU,4BACRM,EAASI,WACTJ,EAASK,UAGd,yBAAKX,UAAU,0BAMvB,yBAAKA,UAAU,sBACX,yBAAKE,IAAI,wBAAwBW,IAAI,qBCf9CC,MATf,WACE,OACE,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCOC,MARf,WACE,OACE,oCACA,kBAAC,EAAD,QCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.14e7221b.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./Header.modules.css\"\r\nfunction Header() {\r\n    return (\r\n        <>\r\n            <header className=\"header\">\r\n                <a href=\"/\">\r\n                    <img className=\"logo\" src=\"/images/logo.png\" />\r\n                </a>\r\n                <input className=\"menu-btn\" type=\"checkbox\" id=\"menu-btn\" />\r\n                <label className=\"menu-icon\" htmlFor=\"menu-btn\">\r\n                    <span className=\"navicon\"></span>\r\n                </label>\r\n                <ul className=\"menu\">\r\n                    <li>\r\n                        <a href=\"#skills\">Skills</a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"#projects\">Projects</a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"#services\">Services</a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"#achievements\">Achievements</a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"#contact\">Contact Me</a>\r\n                    </li>\r\n                </ul>\r\n            </header>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","\r\nimport emoji from \"react-easy-emoji\";\r\n\r\n// Summary and Greeting Section \r\n\r\n\r\nconst greeting = {\r\n    username: \"Hassan Mujtaba\",\r\n    title: emoji(`My name is Hassan Mujtaba.`),\r\n    profession: \"I am a Web and Mobile App Developer by Profession and hobby.\",\r\n    subTitle: emoji(\"ðŸš€ having an experience of building applications with JavaScript / Reactjs / Nodejs / React Native and some other cool libraries and frameworks.\"),\r\n}\r\nexport {greeting}","import React from 'react'\r\nimport emoji from \"react-easy-emoji\";\r\nimport { greeting } from \"../../data/data.js\"\r\nimport \"./Home.modules.css\"\r\n\r\nfunction Home() {\r\n    return (\r\n            <div className=\"greet-main\" id=\"greeting\">\r\n                <div className=\"greeting-main\">\r\n                    <div className=\"greeting-text-div\">\r\n                        <div>\r\n                            <h2 className=\"greet-hello\">\r\n                                Hello!\r\n                                <span className=\"wave-emoji\">{emoji(\"ðŸ‘‹\")}</span>\r\n                            </h2>\r\n                            <h1 className=\"greeting-text\">\r\n                                {greeting.title}\r\n                            </h1>\r\n                            <p className=\"greeting-text-p subTitle\">\r\n                                {greeting.profession}    \r\n                                {greeting.subTitle}\r\n                            </p>\r\n                            {/* <SocialMedia /> */}\r\n                            <div className=\"button-greeting-div\">\r\n                                {/* <Button text=\"Contact me\" href=\"#contact\" /> */}\r\n                                {/* <Button text=\"See my resume\" newTab={true} href={greeting.resumeLink} /> */}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"greeting-image-div\">\r\n                        <img src=\"./images/homeicon.svg\" alt=\"greetingIcon\"/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\r\nimport { Container } from '@material-ui/core';\r\n\r\nimport Header from \"../components/header/Header\"\r\nimport Home from \"../components/home/Home\"\r\n\r\nfunction Main() {\r\n  return (\r\n    <Container>\r\n        <Header/>    \r\n        <Home/>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport './App.css';\nimport Main from \"./pages\"\nfunction App() {\n  return (\n    <>\n    <Main/>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}